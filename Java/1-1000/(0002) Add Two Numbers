/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode list = null;
        ListNode tail = null;
        boolean carryover = false;

        while (l1 != null && l2 != null)
        {
            int data = l1.val + l2.val + (carryover ? 1 : 0);
            carryover = (data / 10) == 1;
            data %= 10;

            ListNode tempNode = new ListNode(data);
            if (list == null)
            {
                list = tempNode;
                tail = tempNode;
            }
            else
            {
                tail.next = tempNode;
                tail = tail.next;
            }

            l1 = l1.next;
            l2 = l2.next;
        }

        while (l1 != null)
        {
            int data = l1.val + (carryover ? 1 : 0);
            carryover = (data / 10) == 1;
            data %= 10;

            tail.next = new ListNode(data);
            tail = tail.next;

            l1 = l1.next;
        }
        while (l2 != null)
        {
            int data = l2.val + (carryover ? 1 : 0);
            carryover = (data / 10) == 1;
            data %= 10;

            tail.next = new ListNode(data);
            tail = tail.next;

            l2 = l2.next;
        }

        if (carryover)
            tail.next = new ListNode(1);

        return list;
    }
}
